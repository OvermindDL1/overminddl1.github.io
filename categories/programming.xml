<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Hyperglot Programmer (Posts that are primarily related to programming)</title><link>http://blog.overminddl1.com/</link><description>Programming related posts</description><atom:link rel="self" type="application/rss+xml" href="http://blog.overminddl1.com/categories/programming.xml"></atom:link><language>en</language><lastBuildDate>Tue, 16 May 2017 15:28:26 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Bucklescript-Tea Game OverBots Pt.1 - Setup</title><link>http://blog.overminddl1.com/posts/bucklescript-tea-game-overbots-pt1-setup/</link><dc:creator>OvermindDL1</dc:creator><description>&lt;div&gt;&lt;p&gt;I've been meaning to make a more comprehensive bucklescript-tea tutorial / example project for a while, and I had an older one partially done but it is a bit out of date now so I've decide to make one anew instead, and to facilitate this I've decided to make a game.  Right now most of the 'reference information' about bucklescript-tea is identical to Elm's documentation, so seeing the real-world use of it would be more generically useful.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.overminddl1.com/posts/bucklescript-tea-game-overbots-pt1-setup/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>bucklescript</category><category>bucklescript-tea</category><category>overbots</category><guid>http://blog.overminddl1.com/posts/bucklescript-tea-game-overbots-pt1-setup/</guid><pubDate>Sat, 13 May 2017 22:17:21 GMT</pubDate></item><item><title>Setting up Bucklescript with Phoenix</title><link>http://blog.overminddl1.com/posts/setting-up-bucklescript-with-phoenix/</link><dc:creator>OvermindDL1</dc:creator><description>&lt;div&gt;&lt;p&gt;This article will demonstrate how to setup Bucklescript to work with a stock Elixir Phoenix project and how to use example code in the project.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.overminddl1.com/posts/setting-up-bucklescript-with-phoenix/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>bucklescript</category><category>elixir</category><category>phoenix</category><guid>http://blog.overminddl1.com/posts/setting-up-bucklescript-with-phoenix/</guid><pubDate>Thu, 26 Jan 2017 05:16:18 GMT</pubDate></item><item><title>Why use Bucklescript</title><link>http://blog.overminddl1.com/posts/why-use-bucklescript/</link><dc:creator>OvermindDL1</dc:creator><description>&lt;div&gt;&lt;p&gt;Why might you want to use Bucklescript?  Let's explore just how awesome OCaml is to use on javascript over alternative languages and why it has staying power.&lt;/p&gt;
&lt;p&gt;OCaml/Bucklescript:&lt;/p&gt;
&lt;pre class="code ocaml"&gt;&lt;a name="rest_code_5c3dc2c0486e4c329a7a55b290b7fafe-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;print_endline&lt;/span&gt; &lt;span class="s2"&gt;"Hello World!"&lt;/span&gt;
&lt;a name="rest_code_5c3dc2c0486e4c329a7a55b290b7fafe-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_5c3dc2c0486e4c329a7a55b290b7fafe-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Javascript:&lt;/p&gt;
&lt;pre class="code javascript"&gt;&lt;a name="rest_code_e70296243d1940e0af2592ab4d1c566f-1"&gt;&lt;/a&gt;&lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Hello World!"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a name="rest_code_e70296243d1940e0af2592ab4d1c566f-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_e70296243d1940e0af2592ab4d1c566f-3"&gt;&lt;/a&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_e70296243d1940e0af2592ab4d1c566f-4"&gt;&lt;/a&gt;  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;l&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;r&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a name="rest_code_e70296243d1940e0af2592ab4d1c566f-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;&lt;a href="http://blog.overminddl1.com/posts/why-use-bucklescript/"&gt;Read more…&lt;/a&gt; (6 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>bucklescript</category><guid>http://blog.overminddl1.com/posts/why-use-bucklescript/</guid><pubDate>Thu, 26 Jan 2017 02:28:10 GMT</pubDate></item><item><title>Embedding Elm in Phoenix</title><link>http://blog.overminddl1.com/posts/embedding-elm-in-phoenix/</link><dc:creator>OvermindDL1</dc:creator><description>&lt;div&gt;&lt;p&gt;I am setting up a new project that will be using Phoenix and Elm together, so I am taking this opportunity to document the process to make it easier for others to set up as well.  Maybe I should turn this into a mix 'new'able template sometime...&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.overminddl1.com/posts/embedding-elm-in-phoenix/"&gt;Read more…&lt;/a&gt; (8 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>elixir</category><category>elm</category><category>phoenix</category><guid>http://blog.overminddl1.com/posts/embedding-elm-in-phoenix/</guid><pubDate>Thu, 18 Aug 2016 02:49:02 GMT</pubDate></item><item><title>Elixir - PipeHere</title><link>http://blog.overminddl1.com/posts/elixir/pipehere/</link><dc:creator>OvermindDL1</dc:creator><description>&lt;div&gt;&lt;p&gt;For my first content-post here I think I will touch on one of Elixir's niggles that bug me, the pipe operator, or specifically one of the few things that bug me about it.  Now do not take this that I hate the pipe operator, I love it, however it does have a few warts, so lets talk about one of them today.&lt;/p&gt;
&lt;p&gt;Regardless of my opinion of where a functional pipe operator like Elixir's &lt;tt class="docutils literal"&gt;|&amp;gt;&lt;/tt&gt; should put arguments (&lt;em&gt;at the end&lt;/em&gt;, &lt;strong&gt;not&lt;/strong&gt; the beginning), wouldn't it be nice to be able to specify where a piped in argument was placed for those needed cases?&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.overminddl1.com/posts/elixir/pipehere/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>elixir</category><category>elixir-proposal</category><category>pipehere</category><category>vic</category><guid>http://blog.overminddl1.com/posts/elixir/pipehere/</guid><pubDate>Mon, 15 Aug 2016 16:46:21 GMT</pubDate></item></channel></rss>